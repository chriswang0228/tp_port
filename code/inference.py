# -*- coding: utf-8 -*-
"""tileseg_unet_code(peel) (5).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ip0UbtuhWs1Rrgww7nyiGZNtizJypDPF

# What is Semantic Segmentation?
Semantic segmentation refers to the process of linking each pixel in an image to a class label. These labels could include a person, car, flower, piece of furniture, etc., just to mention a few.
We can think of semantic segmentation as image classification at a pixel level. For example, in an image that has many cars, segmentation will label all the objects as car objects. However, a separate class of models known as instance segmentation is able to label the separate instances where an object appears in an image. This kind of segmentation can be very useful in applications that are used to count the number of objects, such as counting the amount of foot traffic in a mall.

# Please upvote the kernel if you found it insightful!

# Import Libraries
"""

import numpy as np
import torch
from torchvision import transforms as T
import cv2
import os
import random


device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
torch.manual_seed(0)
random.seed(0)
np.random.seed(0)

import segmentation_models_pytorch_v2

model=torch.load('/home/chriswang/project/tc_port/model_weight/crack_Unet.pt')
model.eval()
IMAGE_PATH = '../dataset/road/20230530/100FTASK/'
for name in os.listdir(IMAGE_PATH):
        array = np.array(cv2.imread(IMAGE_PATH+name))
        t_test = T.Compose([T.ToTensor(), T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])
        image=t_test(array)
        image=image.to(device)
        model.to(device)
        model.eval()
        with torch.no_grad():
            image = image.unsqueeze(0)
            output = model(image)
        output = torch.argmax(output, dim=1).cpu().squeeze(0)
        output = np.array(output)
        output[output==1]=255
        cv2.imwrite('../prediction_tcmodel/'+name, output)


